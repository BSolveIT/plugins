<?php
/**
 * 365i AI FAQ Generator - Test Data Importer
 *
 * This utility script imports test data generated by the testing tools
 * into the WordPress database for analytics visualization.
 *
 * Usage via WP-CLI:
 * wp eval-file plugins/365i-ai-faq-generator/tools/import-test-data.php
 *
 * Usage via browser (requires admin login):
 * http://your-site/wp-admin/?page=ai-faq-generator&action=import-test-data
 */

// Ensure this is being run in WordPress context
if ( ! defined( 'ABSPATH' ) && ! defined( 'WP_CLI' ) ) {
    // Check if it's being accessed directly via browser with proper authentication
    $wp_load_path = dirname( dirname( dirname( dirname( __FILE__ ) ) ) ) . '/wp-load.php';
    if ( file_exists( $wp_load_path ) ) {
        require_once $wp_load_path;
        
        // Check if user is logged in and has proper permissions
        if ( ! current_user_can( 'manage_options' ) ) {
            die( 'Access denied. You must be an administrator to run this script.' );
        }
    } else {
        die( 'This script must be run within WordPress context.' );
    }
}

/**
 * Main class for handling test data import.
 */
class AI_FAQ_Test_Data_Importer {
    /**
     * The directory containing test data logs.
     *
     * @var string
     */
    private $logs_dir;
    
    /**
     * Statistics counters.
     *
     * @var array
     */
    private $stats;
    
    /**
     * Constructor.
     */
    public function __construct() {
        $this->logs_dir = dirname( __FILE__ ) . '/logs';
        $this->stats = [
            'files_processed' => 0,
            'events_imported' => 0,
            'errors' => 0,
            'usage_stats' => 0,
            'activity_logs' => 0
        ];
    }
    
    /**
     * Run the import process.
     */
    public function run() {
        $this->output_header();
        
        // Check if logs directory exists
        if ( ! file_exists( $this->logs_dir ) ) {
            $this->output( "Error: Logs directory not found at {$this->logs_dir}", 'error' );
            $this->output( "Please run the test scripts first to generate log data.", 'info' );
            $this->output_footer();
            return;
        }
        
        // Get all JSON files in the logs directory
        $files = glob( $this->logs_dir . '/*.json' );
        
        if ( empty( $files ) ) {
            $this->output( "No log files found in {$this->logs_dir}", 'warning' );
            $this->output( "Please run the test scripts first to generate log data.", 'info' );
            $this->output_footer();
            return;
        }
        
        $this->output( "Found " . count( $files ) . " log files to process.", 'info' );
        
        // Process each file
        foreach ( $files as $file ) {
            $this->process_file( $file );
        }
        
        // Process the stats file if it exists
        $stats_files = glob( $this->logs_dir . '/test-stats-*.json' );
        if ( ! empty( $stats_files ) ) {
            $this->process_stats_file( $stats_files[0] );
        }
        
        $this->output_footer();
    }
    
    /**
     * Process a single log file.
     *
     * @param string $file_path Path to the log file.
     */
    private function process_file( $file_path ) {
        $this->output( "Processing: " . basename( $file_path ), 'file' );
        
        try {
            // Read and decode the JSON file
            $json_content = file_get_contents( $file_path );
            $data = json_decode( $json_content, true );
            
            if ( json_last_error() !== JSON_ERROR_NONE ) {
                throw new Exception( "JSON parse error: " . json_last_error_msg() );
            }
            
            // Determine the type of log file and process accordingly
            if ( strpos( basename( $file_path ), 'event_' ) === 0 ) {
                $this->import_event_data( $data );
            } elseif ( strpos( basename( $file_path ), 'question-generator' ) !== false ) {
                $this->import_worker_test_data( 'question_generator', $data );
            } elseif ( strpos( basename( $file_path ), 'answer-generator' ) !== false ) {
                $this->import_worker_test_data( 'answer_generator', $data );
            } elseif ( strpos( basename( $file_path ), 'faq-enhancer' ) !== false ) {
                $this->import_worker_test_data( 'faq_enhancer', $data );
            } elseif ( strpos( basename( $file_path ), 'seo-analyzer' ) !== false ) {
                $this->import_worker_test_data( 'seo_analyzer', $data );
            } elseif ( strpos( basename( $file_path ), 'faq-extractor' ) !== false ) {
                $this->import_worker_test_data( 'faq_extractor', $data );
            } elseif ( strpos( basename( $file_path ), 'topic-generator' ) !== false ) {
                $this->import_worker_test_data( 'topic_generator', $data );
            }
            
            $this->stats['files_processed']++;
            
        } catch ( Exception $e ) {
            $this->output( "Error processing file: " . $e->getMessage(), 'error' );
            $this->stats['errors']++;
        }
    }
    
    /**
     * Process the test stats summary file.
     *
     * @param string $file_path Path to the stats file.
     */
    private function process_stats_file( $file_path ) {
        $this->output( "Processing stats summary: " . basename( $file_path ), 'file' );
        
        try {
            // Read and decode the JSON file
            $json_content = file_get_contents( $file_path );
            $stats_data = json_decode( $json_content, true );
            
            if ( json_last_error() !== JSON_ERROR_NONE ) {
                throw new Exception( "JSON parse error: " . json_last_error_msg() );
            }
            
            // Store the overall stats in the database
            $this->import_summary_stats( $stats_data );
            
        } catch ( Exception $e ) {
            $this->output( "Error processing stats file: " . $e->getMessage(), 'error' );
            $this->stats['errors']++;
        }
    }
    
    /**
     * Import event data into the database.
     *
     * @param array $data Event data from log file.
     */
    private function import_event_data( $data ) {
        // Determine the event type and process accordingly
        if ( isset( $data['event_type'] ) ) {
            switch ( $data['event_type'] ) {
                case 'faq_generation':
                    $this->import_faq_generation_event( $data );
                    break;
                case 'worker_test':
                    $this->import_worker_test_event( $data );
                    break;
                case 'rate_limit_violation':
                    $this->import_rate_limit_violation( $data );
                    break;
                case 'error':
                    $this->import_error_event( $data );
                    break;
                case 'settings_change':
                    $this->import_settings_change_event( $data );
                    break;
                default:
                    $this->output( "Unknown event type: {$data['event_type']}", 'warning' );
                    break;
            }
        } elseif ( isset( $data['timestamp'] ) && isset( $data['request'] ) && isset( $data['response'] ) ) {
            // This is a worker test log
            $this->import_worker_test_data( 'unknown', $data );
        } else {
            $this->output( "Unknown data format in log file", 'warning' );
        }
    }
    
    /**
     * Import FAQ generation event.
     *
     * @param array $data Event data.
     */
    private function import_faq_generation_event( $data ) {
        // Get the event date (YYYY-MM-DD)
        $date = substr( $data['timestamp'], 0, 10 );
        
        // Get current usage stats
        $usage_stats = get_option( 'ai_faq_usage_stats', array() );
        
        // Initialize the date entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ] ) ) {
            $usage_stats[ $date ] = array(
                'total_requests' => 0,
                'successful_requests' => 0,
                'failed_requests' => 0,
                'unique_ips' => array(),
                'workers' => array()
            );
        }
        
        // Update the statistics
        $usage_stats[ $date ]['total_requests']++;
        
        if ( $data['success'] ) {
            $usage_stats[ $date ]['successful_requests']++;
        } else {
            $usage_stats[ $date ]['failed_requests']++;
        }
        
        // Track unique IPs (using hash for privacy)
        $ip_hash = md5( $data['user_ip'] );
        $usage_stats[ $date ]['unique_ips'][ $ip_hash ] = true;
        
        // Track worker usage
        if ( isset( $data['workers_used'] ) ) {
            foreach ( $data['workers_used'] as $worker_name => $worker_stats ) {
                if ( ! isset( $usage_stats[ $date ]['workers'][ $worker_name ] ) ) {
                    $usage_stats[ $date ]['workers'][ $worker_name ] = array(
                        'requests' => 0,
                        'success' => 0,
                        'failed' => 0,
                        'total_response_time' => 0
                    );
                }
                
                $usage_stats[ $date ]['workers'][ $worker_name ]['requests'] += $worker_stats['requests'];
                $usage_stats[ $date ]['workers'][ $worker_name ]['success'] += $worker_stats['success'];
                $usage_stats[ $date ]['workers'][ $worker_name ]['failed'] += 
                    $worker_stats['requests'] - $worker_stats['success'];
                $usage_stats[ $date ]['workers'][ $worker_name ]['total_response_time'] += 
                    $worker_stats['response_time'] * 1000; // Convert to milliseconds
            }
        }
        
        // Save the updated stats
        update_option( 'ai_faq_usage_stats', $usage_stats );
        
        $this->stats['events_imported']++;
        $this->stats['usage_stats']++;
        $this->output( "Imported FAQ generation event with " . 
            count( $data['workers_used'] ?? array() ) . " workers", 'success' );
    }
    
    /**
     * Import worker test event.
     *
     * @param array $data Event data.
     */
    private function import_worker_test_event( $data ) {
        // Get the event date (YYYY-MM-DD)
        $date = substr( $data['timestamp'], 0, 10 );
        
        // Get current usage stats
        $usage_stats = get_option( 'ai_faq_usage_stats', array() );
        
        // Initialize the date entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ] ) ) {
            $usage_stats[ $date ] = array(
                'total_requests' => 0,
                'successful_requests' => 0,
                'failed_requests' => 0,
                'unique_ips' => array(),
                'workers' => array()
            );
        }
        
        // Initialize the worker entry if it doesn't exist
        $worker_name = $data['worker'];
        if ( ! isset( $usage_stats[ $date ]['workers'][ $worker_name ] ) ) {
            $usage_stats[ $date ]['workers'][ $worker_name ] = array(
                'requests' => 0,
                'success' => 0,
                'failed' => 0,
                'total_response_time' => 0
            );
        }
        
        // Update the statistics
        $usage_stats[ $date ]['total_requests']++;
        $usage_stats[ $date ]['workers'][ $worker_name ]['requests']++;
        
        if ( $data['success'] ) {
            $usage_stats[ $date ]['successful_requests']++;
            $usage_stats[ $date ]['workers'][ $worker_name ]['success']++;
        } else {
            $usage_stats[ $date ]['failed_requests']++;
            $usage_stats[ $date ]['workers'][ $worker_name ]['failed']++;
        }
        
        // Add response time
        if ( isset( $data['response_time'] ) ) {
            $usage_stats[ $date ]['workers'][ $worker_name ]['total_response_time'] += 
                $data['response_time'] * 1000; // Convert to milliseconds
        }
        
        // Save the updated stats
        update_option( 'ai_faq_usage_stats', $usage_stats );
        
        $this->stats['events_imported']++;
        $this->stats['usage_stats']++;
        $this->output( "Imported worker test event for {$worker_name}", 'success' );
    }
    
    /**
     * Import worker test data from test logs.
     *
     * @param string $worker_type Worker type identifier.
     * @param array $data Test data.
     */
    private function import_worker_test_data( $worker_type, $data ) {
        // Extract timestamp from the data
        $timestamp = isset( $data['timestamp'] ) ? $data['timestamp'] : date( 'Y-m-d\TH:i:s' );
        $date = substr( $timestamp, 0, 10 );
        
        // Get current usage stats
        $usage_stats = get_option( 'ai_faq_usage_stats', array() );
        
        // Initialize the date entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ] ) ) {
            $usage_stats[ $date ] = array(
                'total_requests' => 0,
                'successful_requests' => 0,
                'failed_requests' => 0,
                'unique_ips' => array(),
                'workers' => array()
            );
        }
        
        // Initialize the worker entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ]['workers'][ $worker_type ] ) ) {
            $usage_stats[ $date ]['workers'][ $worker_type ] = array(
                'requests' => 0,
                'success' => 0,
                'failed' => 0,
                'total_response_time' => 0
            );
        }
        
        // Determine success from status or response
        $success = false;
        if ( isset( $data['status'] ) ) {
            $success = $data['status'] >= 200 && $data['status'] < 300;
        } elseif ( isset( $data['response']['status'] ) ) {
            $success = $data['response']['status'] >= 200 && $data['response']['status'] < 300;
        }
        
        // Update the statistics
        $usage_stats[ $date ]['total_requests']++;
        $usage_stats[ $date ]['workers'][ $worker_type ]['requests']++;
        
        if ( $success ) {
            $usage_stats[ $date ]['successful_requests']++;
            $usage_stats[ $date ]['workers'][ $worker_type ]['success']++;
        } else {
            $usage_stats[ $date ]['failed_requests']++;
            $usage_stats[ $date ]['workers'][ $worker_type ]['failed']++;
        }
        
        // Add response time
        $response_time = 0;
        if ( isset( $data['responseTime'] ) ) {
            $response_time = $data['responseTime'];
        }
        $usage_stats[ $date ]['workers'][ $worker_type ]['total_response_time'] += $response_time;
        
        // Save the updated stats
        update_option( 'ai_faq_usage_stats', $usage_stats );
        
        $this->stats['events_imported']++;
        $this->stats['usage_stats']++;
        $this->output( "Imported worker test data for {$worker_type}", 'success' );
    }
    
    /**
     * Import rate limit violation.
     *
     * @param array $data Event data.
     */
    private function import_rate_limit_violation( $data ) {
        // Add to violations log
        $violations = get_option( 'ai_faq_violations_log', array() );
        
        $violations[] = array(
            'timestamp' => strtotime( $data['timestamp'] ),
            'ip' => $data['user_ip'],
            'worker' => $data['worker'],
            'requests_count' => $data['requests_count'],
            'limit' => $data['limit'],
            'blocked' => isset( $data['details']['blocked'] ) ? $data['details']['blocked'] : false,
        );
        
        // Save the updated violations log
        update_option( 'ai_faq_violations_log', $violations );
        
        $this->stats['events_imported']++;
        $this->stats['activity_logs']++;
        $this->output( "Imported rate limit violation for IP: {$data['user_ip']}", 'success' );
    }
    
    /**
     * Import error event.
     *
     * @param array $data Event data.
     */
    private function import_error_event( $data ) {
        // Get the event date (YYYY-MM-DD)
        $date = substr( $data['timestamp'], 0, 10 );
        
        // Get current usage stats
        $usage_stats = get_option( 'ai_faq_usage_stats', array() );
        
        // Initialize the date entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ] ) ) {
            $usage_stats[ $date ] = array(
                'total_requests' => 0,
                'successful_requests' => 0,
                'failed_requests' => 0,
                'unique_ips' => array(),
                'workers' => array(),
                'errors' => array()
            );
        }
        
        // Initialize the errors array if it doesn't exist
        if ( ! isset( $usage_stats[ $date ]['errors'] ) ) {
            $usage_stats[ $date ]['errors'] = array();
        }
        
        // Add the error
        $usage_stats[ $date ]['errors'][] = array(
            'timestamp' => $data['timestamp'],
            'worker' => $data['worker'],
            'error_type' => $data['error_type'],
            'message' => $data['details']['message'],
            'code' => $data['details']['code']
        );
        
        // Update failed requests count
        $usage_stats[ $date ]['total_requests']++;
        $usage_stats[ $date ]['failed_requests']++;
        
        // Initialize the worker entry if it doesn't exist
        if ( ! isset( $usage_stats[ $date ]['workers'][ $data['worker'] ] ) ) {
            $usage_stats[ $date ]['workers'][ $data['worker'] ] = array(
                'requests' => 0,
                'success' => 0,
                'failed' => 0,
                'total_response_time' => 0
            );
        }
        
        // Update worker stats
        $usage_stats[ $date ]['workers'][ $data['worker'] ]['requests']++;
        $usage_stats[ $date ]['workers'][ $data['worker'] ]['failed']++;
        
        // Save the updated stats
        update_option( 'ai_faq_usage_stats', $usage_stats );
        
        $this->stats['events_imported']++;
        $this->stats['activity_logs']++;
        $this->output( "Imported error event: {$data['error_type']}", 'success' );
    }
    
    /**
     * Import settings change event.
     *
     * @param array $data Event data.
     */
    private function import_settings_change_event( $data ) {
        // Create activity log entry
        $activity_log = get_option( 'ai_faq_activity_log', array() );
        
        $activity_log[] = array(
            'timestamp' => strtotime( $data['timestamp'] ),
            'user_id' => $data['user_id'],
            'activity_type' => 'settings_change',
            'details' => array(
                'settings_changed' => $data['settings_changed']
            )
        );
        
        // Save the updated activity log
        update_option( 'ai_faq_activity_log', $activity_log );
        
        $this->stats['events_imported']++;
        $this->stats['activity_logs']++;
        $this->output( "Imported settings change event", 'success' );
    }
    
    /**
     * Import summary statistics.
     *
     * @param array $stats_data Summary statistics data.
     */
    private function import_summary_stats( $stats_data ) {
        // Store test summary stats for dashboard display
        update_option( 'ai_faq_test_summary', $stats_data );
        
        $worker_count = count( $stats_data['workerStats'] ?? array() );
        $this->output( "Imported summary statistics for {$worker_count} workers", 'success' );
    }
    
    /**
     * Output formatted message.
     *
     * @param string $message The message to output.
     * @param string $type The message type (info, success, error, warning, file).
     */
    private function output( $message, $type = 'info' ) {
        if ( defined( 'WP_CLI' ) && WP_CLI ) {
            switch ( $type ) {
                case 'error':
                    \WP_CLI::error( $message, false );
                    break;
                case 'warning':
                    \WP_CLI::warning( $message );
                    break;
                case 'success':
                    \WP_CLI::success( $message );
                    break;
                case 'file':
                    \WP_CLI::log( "\n" . $message );
                    break;
                case 'info':
                default:
                    \WP_CLI::log( $message );
                    break;
            }
        } else {
            // Output for browser
            $color = '';
            switch ( $type ) {
                case 'error':
                    $color = 'color: #f44336;';
                    break;
                case 'warning':
                    $color = 'color: #ff9800;';
                    break;
                case 'success':
                    $color = 'color: #4caf50;';
                    break;
                case 'file':
                    $color = 'color: #2196f3; font-weight: bold; margin-top: 10px;';
                    break;
                case 'info':
                default:
                    $color = 'color: #000000;';
                    break;
            }
            
            echo "<div style=\"{$color}\">{$message}</div>";
            if ( $type === 'file' ) {
                echo "<div style=\"border-top: 1px solid #ccc; margin: 5px 0;\"></div>";
            }
            
            // Flush output buffer to show progress
            if ( ob_get_level() > 0 ) {
                ob_flush();
                flush();
            }
        }
    }
    
    /**
     * Output header.
     */
    private function output_header() {
        if ( ! defined( 'WP_CLI' ) || ! WP_CLI ) {
            echo '<div style="font-family: monospace; background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0;">';
            echo '<h2 style="margin-top: 0;">365i AI FAQ Generator - Test Data Import</h2>';
            echo '<div style="border-top: 1px solid #ddd; margin: 10px 0 20px;"></div>';
        } else {
            \WP_CLI::log( "\n===== 365i AI FAQ Generator - Test Data Import =====" );
        }
    }
    
    /**
     * Output footer with stats.
     */
    private function output_footer() {
        if ( ! defined( 'WP_CLI' ) || ! WP_CLI ) {
            echo '<div style="border-top: 1px solid #ddd; margin: 20px 0 10px;"></div>';
            echo '<h3>Import Summary</h3>';
            echo '<ul>';
            echo '<li>Files processed: ' . $this->stats['files_processed'] . '</li>';
            echo '<li>Events imported: ' . $this->stats['events_imported'] . '</li>';
            echo '<li>Usage statistics: ' . $this->stats['usage_stats'] . '</li>';
            echo '<li>Activity logs: ' . $this->stats['activity_logs'] . '</li>';
            echo '<li>Errors: ' . $this->stats['errors'] . '</li>';
            echo '</ul>';
            
            echo '<div style="margin-top: 20px;">';
            echo '<a href="' . admin_url( 'admin.php?page=ai-faq-generator' ) . '" style="background: #2271b1; color: white; padding: 10px 15px; text-decoration: none; border-radius: 3px;">Return to Dashboard</a>';
            echo '</div>';
            
            echo '</div>';
        } else {
            \WP_CLI::log( "\n===== Import Summary =====" );
            \WP_CLI::log( "Files processed: " . $this->stats['files_processed'] );
            \WP_CLI::log( "Events imported: " . $this->stats['events_imported'] );
            \WP_CLI::log( "Usage statistics: " . $this->stats['usage_stats'] );
            \WP_CLI::log( "Activity logs: " . $this->stats['activity_logs'] );
            \WP_CLI::log( "Errors: " . $this->stats['errors'] );
        }
    }
}

// Run the importer
$importer = new AI_FAQ_Test_Data_Importer();
$importer->run();